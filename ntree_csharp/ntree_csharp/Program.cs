using System;
using System.Collections.Generic;

namespace ntree_csharp
{
    class MainClass
    {
        static int MakeNumber(Random clRand, int iDigits)
        {
            int iLen = clRand.Next(1, iDigits - 1);
            int iNum = clRand.Next(0, (int)Math.Pow(10, iLen));

            return iNum;
        }

        static void MakeRandomChildren(Random rRand, CIntTreeNode itnNode, int iDepth, int iMaxDepth, int iMaxChildren, int iMaxDigits) // 4 maxdhild 8 maxdigits
        {
            if (iDepth > iMaxDepth)
            {
                return;
            }

            int iChildren = rRand.Next(0, iMaxChildren);

            for (int i = 0; i < iChildren; ++i)
            {
                CIntTreeNode itnChild = new CIntTreeNode(MakeNumber(rRand, iMaxDigits), itnNode, CTreeNode.ENodeCreate.ENODE_LAST_CHILD);

                MakeRandomChildren(rRand, itnChild, iDepth + 1, iMaxDepth, iMaxChildren, iMaxDigits);
            }

            return;
        }

        // Showcases how we can make the tree autogenerate itself and how flexible the structure is in terms of adding elements.
        static string MakeRandomIntTree(int iDepth, int iMaxDepth, int iMaxDigits, int iMaxChildren, int iSpaces)
        {
            Random rRand = new Random();
            CIntTreeNode itnRoot = new CIntTreeNode(MakeNumber(rRand, iMaxDigits));

            MakeRandomChildren(rRand, itnRoot, iDepth, iMaxDepth, iMaxChildren, iMaxDigits);

            return itnRoot.WriteTreeToString(iSpaces);
        }

        // Shows how we can manually build a tree.
        static string MakeStringTree(int iSpaces)
        {
            string[] arr_sLetters = { "P", "M", "X", "D", "E", "F", "G", "H", "J", "K" };
            Stack<string> stk_sLetters = new Stack<string>();
            CStringTreeNode stnRoot, stnChild, stnGrandChild;

            foreach (string sLetter in arr_sLetters)
            {
                stk_sLetters.Push(sLetter);
            }

            // Visual Studio complains but we can actually just leave the childless nodes unasigned.
            stnRoot = new CStringTreeNode(stk_sLetters.Pop());
            stnChild = new CStringTreeNode(stk_sLetters.Pop(), stnRoot, CTreeNode.ENodeCreate.ENODE_FIRST_CHILD);
            new CStringTreeNode(stk_sLetters.Pop(), stnChild, CTreeNode.ENodeCreate.ENODE_FIRST_CHILD);
            new CStringTreeNode(stk_sLetters.Pop(), stnChild, CTreeNode.ENodeCreate.ENODE_LAST_CHILD);
            stnChild = new CStringTreeNode(stk_sLetters.Pop(), stnRoot, CTreeNode.ENodeCreate.ENODE_LAST_CHILD);
            stnGrandChild = new CStringTreeNode(stk_sLetters.Pop(), stnChild, CTreeNode.ENodeCreate.ENODE_FIRST_CHILD);
            new CStringTreeNode(stk_sLetters.Pop(), stnGrandChild, CTreeNode.ENodeCreate.ENODE_FIRST_CHILD);
            stnGrandChild = new CStringTreeNode(stk_sLetters.Pop(), stnChild, CTreeNode.ENodeCreate.ENODE_LAST_CHILD);
            new CStringTreeNode(stk_sLetters.Pop(), stnGrandChild, CTreeNode.ENodeCreate.ENODE_FIRST_CHILD);
            new CStringTreeNode(stk_sLetters.Pop(), stnGrandChild, CTreeNode.ENodeCreate.ENODE_LAST_CHILD);

            return stnRoot.WriteTreeToString(iSpaces);
        }

        public static void Main(string[] args)
        {
            string sRandomIntTree = MakeRandomIntTree(1, 10, 8, 4, 2);
            string sStringTree = MakeStringTree(2);

            Console.WriteLine("Autogenerated random integer tree:\n");
            Console.WriteLine(sRandomIntTree);
            Console.WriteLine("\n\nManually generated string tree:\n");
            Console.WriteLine(sStringTree);
        }
    }
}